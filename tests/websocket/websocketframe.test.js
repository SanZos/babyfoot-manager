const { runner } = require('../testUtils')

const WebSocketFrame = require('../../src/websocket/websocketframe')

const frame = Buffer.from([
  0x81, 0xfe, 0x00, 0x7f, 0xfc, 0xe3, 0x86, 0x37, 0x87, 0xc1,
  0xf5, 0x58, 0x9f, 0x88, 0xe3, 0x43, 0xb5, 0x87, 0xa4, 0x0d,
  0xde, 0xdb, 0xb0, 0x0f, 0xca, 0x85, 0xe4, 0x0e, 0x9d, 0xce,
  0xe0, 0x0f, 0x9d, 0xda, 0xab, 0x03, 0xcb, 0x82, 0xe4, 0x1a,
  0xc4, 0xd6, 0xe5, 0x53, 0xd1, 0xd5, 0xb4, 0x54, 0xcc, 0x81,
  0xbf, 0x07, 0xcf, 0x82, 0xe0, 0x53, 0x9a, 0xc1, 0xaa, 0x15,
  0x88, 0x9a, 0xf6, 0x52, 0xde, 0xd9, 0xa4, 0x5e, 0x92, 0x8a,
  0xf2, 0x15, 0xd0, 0xc1, 0xf3, 0x44, 0x99, 0x91, 0xe8, 0x56,
  0x91, 0x86, 0xa4, 0x0d, 0xde, 0xb6, 0xf2, 0x5e, 0x90, 0x8a,
  0xf5, 0x56, 0x88, 0x86, 0xf3, 0x45, 0xd1, 0xdb, 0xb0, 0x0f,
  0xca, 0x85, 0xe4, 0x0e, 0x9d, 0xce, 0xe0, 0x0f, 0x9d, 0xda,
  0xab, 0x03, 0xcb, 0x82, 0xe4, 0x1a, 0xc4, 0xd6, 0xe5, 0x53,
  0xd1, 0xd5, 0xb4, 0x54, 0xcc, 0x81, 0xbf, 0x07, 0xcf, 0x82,
  0xe0, 0x53, 0x9a, 0xc1, 0xfb
])

const unMasked = {
  socketId: '8686fb9a-f8a9-47ab-85cd-62c0b903afdf',
  type: 'init',
  username: 'Utilisateur-8686fb9a-f8a9-47ab-85cd-62c0b903afdf'
}

const unparsableFrame = Buffer.from([
  0x81, 0xff, 0x00, 0x7f, 0xfc, 0xe3
])

class WebSocketFrameTest {
  /**
   * Test du constructeur
   * @see WebSocketFrame.constructor
   */
  static constructorTest () {
    // Test de la création de l'objet
    WebSocketFrameTest.object = new WebSocketFrame(frame)
    runner('ok', WebSocketFrameTest.object instanceof WebSocketFrame)

    // Vérification des valeurs initiales
    runner('equal', WebSocketFrameTest.object.buffer, frame)
    runner('equal', WebSocketFrameTest.object.currentOffset, 2)
    runner('equal', WebSocketFrameTest.object.payloadLength, 0)
    runner('equal', WebSocketFrameTest.object.data, null)
  }

  /**
   * Test du parsing de trame
   * @see WebSocketFrame.parseFrame
   */
  static parseFrameTest () {
    // Test du traitement d'une trame correct
    runner('deepEqual', WebSocketFrameTest.object.parseFrame(), unMasked)

    // Test du traitement d'un trame qui dépasse la limite
    runner('throws', new WebSocketFrame(unparsableFrame).parseFrame, 'On ne traite que les trames dont le payload est sur 7 bits')
  }

  /**
   * Test du démasquage de la trame
   * @see WebSocketFrame.unMaskFrame
   */
  static unMaskFrameTest () {
    // On rembobine l'offset pour extraire la clef
    WebSocketFrameTest.object.currentOffset = 4

    WebSocketFrameTest.object.unMaskFrame()
    runner('equal', WebSocketFrameTest.object.data.toString(), JSON.stringify(unMasked))
  }
}

/** @type WebSocketFrame */
WebSocketFrameTest.object = {}

module.exports = WebSocketFrameTest
